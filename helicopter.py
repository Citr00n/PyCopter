# –í–µ—Ä—Ç–æ–ª—ë—Ç (–∏–≥—Ä–æ–∫)
from utils import randcell


# –ö–ª–∞—Å—Å –≤–µ—Ä—Ç–æ–ª—ë—Ç–∞
class Helicopter:
    def __init__(self, w, h):  # w –∏ h - –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ —Ç–æ—á–∫–∏ –ø–æ–ª—è
        rc = randcell(w, h)  # –í—ã—Å—Ç–∞–≤–∏—Ç—å —Å–µ–±—è –Ω–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö –ø–æ–ª—è (–¥–æ –≥—Ä–∞–Ω–∏—Ü)
        self.x = rc[0]
        self.y = rc[1]
        self.w = w
        self.h = h
        self.tank = 0
        self.mxtank = 1
        self.score = 0

    # –ú–µ—Ç–æ–¥ –¥–≤–∏–∂–µ–Ω–∏—è
    def move(self, dx, dy):
        nx = dx + self.x
        ny = dy + self.y
        # –ï—Å–ª–∏ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ x –±–æ–ª—å—à–µ/—Ä–∞–≤–Ω–æ –Ω—É–ª—é (–í–µ—Ä—Ö–Ω–∏–µ –≥—Ä–∞–Ω–∏—Ü—ã –∫–∞—Ä—Ç—ã) –∏ –º–µ–Ω—å—à–µ –∫—Ä–∞–π–Ω–µ–π x –Ω–∞ –∫–∞—Ä—Ç–µ (–ù–∏–∂–Ω–∏–µ –≥—Ä–∞–Ω–∏—Ü—ã)
        # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ —Å y
        if 0 <= ny < self.h and 0 <= nx < self.w:
            self.x = nx
            self.y = ny

    # –í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    def prstats(self):
        print(f"üíß: {self.tank}/{self.mxtank}    üí≤: {self.score}")

# –°–∫—Ä–∏–ø—Ç –∫–∞—Ä—Ç—ã/–ø–æ–ª—è
# –ò–∑ utils.py –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥/—Ñ—É–Ω–∫—Ü–∏—é randbool
from utils import randbool, randcell, randcell2

# –¢–∏–ø—ã –∫–ª–µ—Ç–æ–∫
CELLTYPES = "üü©üå≤üåäüè•üíµüî•"


class Map:  # –ö–ª–∞—Å—Å –∫–∞—Ä—Ç—ã
    def __init__(self, w, h):  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—è
        self.w = w
        self.h = h
        self.cells = [[0 for i in range(w)] for j in range(h)]  # –ü—É—Å—Ç–æ–µ –ø–æ–ª–µ

    # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ø–æ–ª—è
    def printmap(self, heli):
        print("üü•" * (self.w + 2))  # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –≤–µ—Ä—Ö–Ω–∏—Ö
        for i in range(self.h):
            print("üü•", end="")  # —Å–ª–µ–≤–∞ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏
            for j in range(self.w):
                if heli.x == i and heli.y == j:
                    print("üöÅ", end="")
                else:
                    print(CELLTYPES[self.cells[i][j]], end="")
            print("üü•")  # —Å–ø—Ä–∞–≤–∞ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏
        print("üü•" * (self.w + 2))  # –ò –Ω–∏–∂–Ω–∏—Ö –≥—Ä–∞–Ω–∏—Ü –ø–æ–ª—è

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ª–µ–∑–∞–Ω–∏—è –∫–ª–µ—Ç–∫–∏ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã –∫–∞—Ä—Ç—ã
    def checkcell(self, y, x):
        if x < 0 or y < 0 or x >= self.w or y >= self.h:  # –ï—Å–ª–∏ x –∏ y –ú–µ–Ω—å—à–µ 0/–ë–æ–ª—å—à–µ –≤—ã—Å–æ—Ç—ã –∏–ª–∏ —à–∏—Ä–∏–Ω—ã
            return False
        return True

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ª–µ—Å–∞
    # r - –ß–∏—Å–ª–∏—Ç–µ–ª—å
    # mxr - –ó–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å
    # –í –∏—Ç–æ–≥–µ —à–∞–Ω—Å r/mxr (–ù–∞–ø—Ä–∏–º–µ—Ä 5/10 - 50%)
    def genforest(self, r, mxr):
        for i in range(self.h):
            for j in range(self.w):
                if randbool(r, mxr):
                    self.cells[i][j] = 1

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫
    def genriver(self, L):
        rc = randcell(self.w, self.h)
        rx = rc[0]
        ry = rc[1]
        if self.checkcell(rx, ry):  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã—Ö–æ–¥–∞ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—É
            self.cells[rx][ry] = 2
        while L > 0:
            rc2 = randcell2(rx, ry)
            rx2 = rc2[0]
            ry2 = rc2[1]
            if self.checkcell(rx2, ry2):  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã—Ö–æ–¥–∞ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—É
                self.cells[rx2][ry2] = 2
            L -= 1

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ä–µ–≤—å–µ–≤
    def gentree(self):
        c = randcell(self.w, self.h)
        cx = c[0]
        cy = c[1]
        if self.cells[cx][cy] == 0:
            self.cells[cx][cy] = 1

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–≥–Ω—è
    def genfire(self):
        c = randcell(self.w, self.h)  # –í —Ä–∞–Ω–¥–æ–º–Ω–æ–π –∫–ª–µ—Ç–∫–µ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–≥–æ–Ω—å (–µ—Å–ª–∏ —Ç–∞–º –µ—Å—Ç—å –¥–µ—Ä–µ–≤–æ)
        cx = c[0]
        cy = c[1]
        if self.cells[cx][cy] == 1:
            self.cells[cx][cy] = 5

    # –°–∂–∏–≥–∞–Ω–∏–µ
    def burn(self):
        for i in range(self.h):  # –ï—Å–ª–∏ –≤ –∫–ª–µ—Ç–∫–µ –µ—Å—Ç—å –æ–≥–æ–Ω—å, —Ç–æ –æ—á–∏—Å—Ç–∏—Ç—å –µ—ë (–ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å –≤ –ø–æ–ª–µ)
            for j in range(self.w):
                cell = self.cells[i][j]
                if cell == 5:
                    self.cells[i][j] = 0
        for i in range(10):  # –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–≥–æ–Ω—å 10 —Ä–∞–∑
            self.genfire()

    def heliproc(self, heli):

        # –ù–∞–±–æ—Ä –≤–æ–¥—ã –≤ –±–∞–∫
        c = self.cells[heli.x][heli.y]
        if c == 2:
            heli.tank = heli.mxtank

        # –¢—É—à–µ–Ω–∏–µ –æ–≥–Ω—è
        elif c == 5:
            if heli.tank > 0:
                self.cells[heli.x][heli.y] = 1
                heli.tank -= 1
                heli.score += 1
